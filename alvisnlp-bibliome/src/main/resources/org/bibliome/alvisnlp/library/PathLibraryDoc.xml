<?xml version="1.0"?>
<!--
Copyright 2016, 2017 Institut National de la Recherche Agronomique

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<alvisnlp-doc target="org.bibliome.alvisnlp.library.ConcretePathLibrary" short-target="path">
<!--
Copyright 2016 Institut National de la Recherche Agronomique

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<synopsis>
  <p>Functions to compute the shortest path between two elements in a graph directed.</p>
  <p>All functions of this library require an argument that represent the vertices of the graph. This argument is a function evaluated as a list of elements that represent all elements that can be reached from the context element in a single step.</p>
</synopsis>

  <library-doc>
    <function-doc first-ftor="to" synopsis="path:to(to, vert)">
      <p>Evaluates <em>to</em> as a list of elements, then computes the shortest path from the context element to the first element in the result.</p>
    </function-doc>
  
    <function-doc first-ftor="between" synopsis="path:between(from, to, vert)">
      <p>Evaluates <em>from</em> and <p>to</p> as lists of elements, then computes the shortest from the first element of the former to the first element of the latter.</p>
    </function-doc>
  </library-doc>
</alvisnlp-doc>
