/*
Copyright 2016, 2017 Institut National de la Recherche Agronomique

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


options
{
  JDK_VERSION = "1.5";
  static = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  ERROR_REPORTING = true;
  KEEP_LINE_COLUMN = true;
  SANITY_CHECK = true;
  UNICODE_INPUT = true;
  GENERATE_ANNOTATIONS = true;
}

PARSER_BEGIN(ExpressionParser)
package org.bibliome.alvisnlp.converters.expression.parser;

import java.util.ArrayList;
import java.util.List;
import java.io.Reader;
import java.io.StringReader;

import org.bibliome.alvisnlp.library.standard.NavigationLibrary;
import org.bibliome.alvisnlp.modules.pattern.ElementPattern;
import org.bibliome.alvisnlp.modules.pattern.ExpressionFilterProxy;
import org.bibliome.util.Pair;
import org.bibliome.util.pattern.Alternatives;
import org.bibliome.util.pattern.CapturingGroup;
import org.bibliome.util.pattern.Clause;
import org.bibliome.util.pattern.Group;
import org.bibliome.util.pattern.Predicate;
import org.bibliome.util.pattern.Quantifier;
import org.bibliome.util.pattern.QuantifierType;
import org.bibliome.util.pattern.SequenceEnd;
import org.bibliome.util.pattern.SequenceStart;

import alvisnlp.corpus.expressions.Expression;

@SuppressWarnings("all")
public class ExpressionParser {
  private static final Expression binaryOperator(String lib, String op, Expression left, Expression right) {
    return new Expression(lib, op, left, right);  }
  
  private static final Expression unaryOperator(String lib, String op, Expression expr) {
    return new Expression(lib, op, expr);
  }

  private static final Expression binaryComparisonOperator(String op, Expression left, Expression right) {	return new Expression(org.bibliome.alvisnlp.library.standard.ComparisonLibrary.NAME, op, left, right);
  }

  private static final Expression unaryComparisonOperator(String op, String operand, Expression arg) {
    return new Expression(org.bibliome.alvisnlp.library.standard.ComparisonLibrary.NAME, op, operand, arg);  }
  
  private static final Expression constant(String type, String value) {
    return new Expression(alvisnlp.corpus.expressions.ConstantsLibrary.NAME, type, value);  }
  
  public static Expression parseUnsafe(String expr) {
    Reader reader = new StringReader(expr);
    ExpressionParser parser = new ExpressionParser(reader);
    try {
      return parser.expression();
    }
    catch(ParseException e) {
      throw new RuntimeException(e);
    }
  }
  
  private static final String unEscape(String s) {
    boolean esc = false;
    StringBuilder sb = null;
    for (int i = 0; i < s.length(); ++i) {
      char c = s.charAt(i);
      if (esc) {
        switch (c) {
          case 'n': c = '\n'; break;          case 't': c = '\t'; break;
          case 'r': c = '\r'; break;
        }
        sb.append(c);
        esc = false;
        continue;
      }
      if (c == '\\') {
        if (sb == null) {
          sb = new StringBuilder(s.length());
          sb.append(s.substring(0, i));
        }
        esc = true;
        continue;
      }
      if (sb != null)
        sb.append(c);
    }
    if (sb == null)
      return s;
    return sb.toString();
  }
}

PARSER_END(ExpressionParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}
// unused symbols: & ~ # = ; ! 

TOKEN :
{
  < COLON       : ":" >
| < COMMA       : "," >
| < LPAREN      : "(" >
| < RPAREN      : ")" >
| < PLUS        : "+" >
| < MINUS       : "-" >
| < MULT        : "*" >
| < DIV         : "/" >
| < MOD         : "%" >
| < DOT         : "." >
| < UNION       : "|" >
| < LT          : "<" >
| < GT          : ">" >
| < CONCAT      : "^" >
| < SELF        : "$" >
| < FEATURE     : "@" >
| < AS          : "as" >
| < IN          : "in" >
| < EQ          : "==" >
| < NE          : "!=" >
| < LE          : "<=" >
| < GE          : ">=" >
| < REGEXP      : "=~" >
| < CONTAINS    : "?=" >
| < STARTS_WITH : "^=" >
| < ENDS_WITH   : "=^" >
| < IF          : "if" >
| < OR          : "or" >
| < NOT         : "not" >
| < AND         : "and" >
| < ANY         : "any" >
| < END         : "end" >
| < THEN        : "then" >
| < ELSE        : "else" >
| < TRUE        : "true" >
| < FALSE       : "false" >
| < START       : "start" >
| < INTEGER     : (["0"-"9"])+>
| < DOUBLE      : ((["0"-"9"])* ".")? (["0"-"9"])+>
| < UNQUOTED    : [ "A"-"Z", "a"-"z", "_" ] ([ "A"-"Z", "a"-"z", "_", "-", "0"-"9" ])* >
| < DQUOTED     : "\"" (
  (~["\"", "\\"])
  | ("\\"(["n", "t", "b", "r", "f", "\\", "'", "\""]
  | ["0"-"7"](["0"-"7"])?
  | ["0"-"3"]["0"-"7"]["0"-"7"])))*
  "\"">
| < SQUOTED     : "\'" (
  (~["\'", "\\", "\n", "\r"])
  | ("\\"(["n", "t", "b", "r", "f", "\\", "'", "\""]
  | ["0"-"7"](["0"-"7"])?
  | ["0"-"3"]["0"-"7"]["0"-"7"])))*
  "\'">
| < RQUOTED     : "/" (
  (~["\'", "\\", "\n", "\r", "/"])
  | ("\\"(["n", "t", "b", "r", "f", "\\", "'", "\"", "/"]
  | ["0"-"7"](["0"-"7"])?
  | ["0"-"3"]["0"-"7"]["0"-"7"])))*
  "/">

// Pattern tokens
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < OPTION   : "?" >
| < LCURLY   : "{" >
| < RCURLY   : "}" >
}

public Expression expression():
{
  Expression result;
}
{
  result=top() < EOF >
  { return result; }
}

public Expression top():
{
  Expression result;
}
{
  result=conditional()
  { return result; }
}

private Expression conditional():
{
  Expression e;
  Expression t;
  Expression f;
  List<Expression> cases = new ArrayList<Expression>();
}
{
  e=or() { return e; }
| (< IF > e=or() < THEN > t=or() { cases.add(e); cases.add(t); })+ < ELSE > f=or()
  { cases.add(f); return new Expression(org.bibliome.alvisnlp.library.standard.ConditionalLibrary.NAME, cases); }
}

private Expression or():
{
  Expression result;
  Expression e;
}
{
  result=and() (< OR > e=and() { result = binaryOperator("boolean", "or", result, e); })*
  { return result; }
}

private Expression and():
{
  Expression result;
  Expression e;
}
{
  result=not() (< AND > e=not()  { result = binaryOperator("boolean", "and", result, e); })*
  { return result; }
}

private Expression not():
{
  Expression result;
  Token t = null;
}
{
  (t=< NOT >)? result=compare()
  {
    if (t == null)
      return result;
    return unaryOperator("boolean", "not", result);
  }
}

private Expression compare():
{
  String s = null;
  Expression result;
  Expression e = null;
}
{
  < ANY > (< FEATURE >)? s=name() < EQ > e=concat() { return unaryComparisonOperator("any", s, e); }
| result=concat() (result=comp(result))?
  { return result; }
}

private Expression comp(Expression e):
{
  Expression result;
}
{
  result=generalComp(e) { return result; }
| result=intComp(e) { return result; }
| result=stringComp(e) { return result; }
| result=regexp(e) { return result; }
| result=matchDict(e) { return result; }
}

private Expression generalComp(Expression left):
{
  String compOp;
  Expression right;
}
{
  compOp=compOp() right=concat()
  { return binaryComparisonOperator(compOp, left, right); }
}

private String compOp():
{
}
{
  < EQ > { return "=="; }
| < NE > { return "!="; }
}

private Expression intComp(Expression left):
{
  String doubleCompOp;
  Expression right;
}
{
  doubleCompOp=doubleCompOp() right=concat()
  { return binaryComparisonOperator(doubleCompOp, left, right); }
}

private String doubleCompOp():
{
}
{
  < LT > { return "<"; }
| < GT > { return ">"; }
| < LE > { return "<="; }
| < GE > { return ">="; }
}

private Expression stringComp(Expression left):
{
  String op;
  Expression right;
}
{
  op=stringCompOp() right=concat()
  { return binaryComparisonOperator(op, left, right); }
}

private String stringCompOp():
{
}
{
  < CONTAINS > { return "?="; }
| < STARTS_WITH > { return "^="; }
| < ENDS_WITH > { return "=^"; }
}

private Expression regexp(Expression expr):
{
  String pattern;
}
{
  < REGEXP > pattern=string()
  { return unaryComparisonOperator("=~", pattern, expr); }
}

private Expression matchDict(Expression expr):
{
  String path;
}
{
  < IN > path=string()
  { return unaryComparisonOperator("in", path, expr); }
}

private Expression concat():
{
  Expression result;
  Expression expr;
  List<Expression> concat = null;
}
{
  result=plus() (< CONCAT > expr=plus() { if (concat == null) { concat = new ArrayList<Expression>(); concat.add(result); } concat.add(expr); })*
  {
    if (concat == null)
      return result;
    return new Expression(org.bibliome.alvisnlp.library.StringLibrary.NAME, "concat", concat);
  }
}

private Expression plus():
{
  String op;
  Expression result;
  Expression e;
}
{
  result=mult() (op=plusOp() e=mult() { result = binaryOperator("arithmetic", op, result, e); })*
  { return result; }
}

private String plusOp():
{
}
{
  < PLUS > { return "+"; }
| < MINUS > { return "-"; }
}

private Expression mult():
{
  String op;
  Expression result;
  Expression e;
}
{
  result=uminus() (op=multOp() e=uminus() { result = binaryOperator("arithmetic", op, result, e); })*
  { return result; }
}

private String multOp():
{
}
{
  < MULT > { return "*"; }
| < DIV > { return "/"; }
| < MOD > { return "%"; }
}

private Expression uminus():
{
  Token t = null;
  Expression result;
}
{
  (t=< MINUS >)? result=union()
  {
    if (t == null)
      return result;
    return new Expression(org.bibliome.alvisnlp.library.standard.ArithmeticLibrary.NAME, "-", result);
  }
}

private Expression union():
{
  Expression result;
  Expression e;
  List<Expression> union = null;
}
{
  result=path() (< UNION > e=path() { if (union == null) { union = new ArrayList<Expression>(); union.add(result); } union.add(e); })*
  {
    if (union == null)
      return result;
    return new Expression(org.bibliome.alvisnlp.library.standard.NavigationLibrary.NAME, "|", union);
  }
}

private Expression path():
{
  Expression result;
}
{
  result=filtered() (result=pathContinuation(result))?
  { return result; }
}

private Expression pathContinuation(Expression expr):
{
  Expression e;
  String var;}{
  < DOT > e=path() { return new Expression(NavigationLibrary.NAME, ".", expr, e); }
| < AS > var=name() < DOT > e=path() { return new Expression(NavigationLibrary.NAME, ".", expr, new Expression(NavigationLibrary.NAME, "assign", var, e)); }}

private Expression filtered():
{
  Expression result;
}
{
  result=atom() (result=auxFiltered(result))?
  { return result; }
}

private Expression auxFiltered(Expression expr):{
  Expression result;}{
  result=newFilter(expr) { return result; }
| result=newRange(expr)  { return result; }
}

private Expression newFilter(Expression expr):
{
  Expression filter;}{
  < LBRACKET > filter=top() < RBRACKET > { expr = new Expression(org.bibliome.alvisnlp.library.standard.SelectLibrary.NAME, "[]", expr, filter); } (expr=newRange(expr))?  { return expr; }}

private Expression newRange(Expression expr):
{
  Expression begin;
  Expression end = null;
  List<Expression> rangeArgs = new ArrayList<Expression>(3);
  rangeArgs.add(expr);}{
  < LCURLY > begin=top() { rangeArgs.add(begin); } (< COMMA > end=top() { rangeArgs.add(end); })? < RCURLY > { expr = new Expression(org.bibliome.alvisnlp.library.standard.SelectLibrary.NAME, "{}", rangeArgs); } (expr=newFilter(expr))?
  { return expr; }}

private Expression atom():
{
  String s = null;
  String lib;
  Expression e;
  List<String> ftors = new ArrayList<String>(3);
  List<Expression> args = new ArrayList<Expression>();
}
{
  < LPAREN > e=top() < RPAREN > { return e; }

// scalar constants
| s=booleanConstant() { return constant("boolean", s); }
| s=doubleConstant() { return constant("double", s); }
| s=intConstant() { return constant("int", s); }
| s=string() { return constant("string", s); }

// library
| LOOKAHEAD(2) lib=extendedName() (< COLON > s=extendedName() { ftors.add(s); })* (< LPAREN > (e=top() { args.add(e); } (< COMMA > e=top() { args.add(e); })*)? < RPAREN >)? { Pair<String,List<String>> leg = LegacyFunctors.getFunctors(lib, ftors, args.size()); return new Expression(leg.first, leg.second, args); }

// features
| < FEATURE > s=extendedName() { return new Expression(org.bibliome.alvisnlp.library.standard.PropertiesLibrary.NAME, "@", s); }

// self
| < SELF > { return new Expression(org.bibliome.alvisnlp.library.standard.NavigationLibrary.NAME, "$"); }
}

private String booleanConstant():
{
}
{
  < TRUE > { return "true"; }
| < FALSE > { return "false"; }
}

private String extendedName():{
  String result;}{
  result=name() { return result; }
| < START > { return "start"; }| < END > { return "end"; }
}

private String name():
{
  Token t;
}
{
  t=< UNQUOTED > { return t.image; }
| t=< SQUOTED > { return unEscape(t.image.substring(1, t.image.length() - 1)); }
}

private String string():
{
  Token t;
}
{
  t=< DQUOTED > { return unEscape(t.image.substring(1, t.image.length() - 1)); }
}

private String doubleConstant():
{
  Token t;
}
{
  t=< DOUBLE > { return t.image; }
}

private String intConstant():
{
  Token t;
}
{
  t=< INTEGER > { return t.image; }
}















public ElementPattern pattern():
{
  Group<Void,Void,ExpressionFilterProxy> top;
  Clause<Void,Void,ExpressionFilterProxy> clause;
  List<Clause<Void,Void,ExpressionFilterProxy>> children = new ArrayList<Clause<Void,Void,ExpressionFilterProxy>>();
}
{
  (clause=alternatives() { children.add(clause); })+ < EOF >
  {
    top = new Group<Void,Void,ExpressionFilterProxy>(Quantifier.DEFAULT);
    top.addChildren(children);
    return new ElementPattern(top);
  }
}

private Group<Void,Void,ExpressionFilterProxy> group():
{
  Clause<Void,Void,ExpressionFilterProxy> clause;
  List<Clause<Void,Void,ExpressionFilterProxy>> children = new ArrayList<Clause<Void,Void,ExpressionFilterProxy>>();
  Quantifier quantifier = Quantifier.DEFAULT;
  String name = null;
}
{
  < LPAREN > (name=name() < COLON >)? (clause=alternatives() { children.add(clause); })+ < RPAREN > (quantifier=quantifier())?
  {
    Group<Void,Void,ExpressionFilterProxy> result;
    if (name == null)
      result = new Group<Void,Void,ExpressionFilterProxy>(quantifier);
    else
      result = new CapturingGroup<Void,Void,ExpressionFilterProxy>(quantifier, name);
    result.addChildren(children);
    return result;
  }
}

private Clause<Void,Void,ExpressionFilterProxy> alternatives():
{
  Clause<Void,Void,ExpressionFilterProxy> clause;
  Alternatives<Void,Void,ExpressionFilterProxy> alternatives = null;
  Clause<Void,Void,ExpressionFilterProxy> alt;
}
{
  clause=clause() (< UNION > alt=clause() { if (alternatives == null) { alternatives = new Alternatives<Void,Void,ExpressionFilterProxy>(); alternatives.add(clause); clause = alternatives; } alternatives.add(alt); })*
  { return clause; }
}

private Clause<Void,Void,ExpressionFilterProxy> clause():
{
  Clause<Void,Void,ExpressionFilterProxy> clause;
}
{
  < START > { return new SequenceStart<Void,Void,ExpressionFilterProxy>(); }
| < END > { return new SequenceEnd<Void,Void,ExpressionFilterProxy>(); }
| clause=predicate() { return clause; }
| clause=group() { return clause; }
}

private Quantifier quantifier():
{
  boolean reluctant;
  String min;
  String max = null;
  boolean range = false;
}
{
  < OPTION > reluctant=reluctant()
  {
    if (reluctant)
      return Quantifier.RELUCTANT_OPTIONAL;
    return Quantifier.OPTIONAL;
  }
| < MULT > reluctant=reluctant()
  {
    if (reluctant)
      return Quantifier.RELUCTANT_STAR;
    return Quantifier.STAR;
  }
| < PLUS > reluctant=reluctant()
  {
    if (reluctant)
      return Quantifier.RELUCTANT_PLUS;
    return Quantifier.PLUS;
  }
| < LCURLY > min=intConstant() (< COMMA > { range = true; } (max=intConstant())?)? < RCURLY > reluctant=reluctant()
  {
    if (range) {
      return new Quantifier(Integer.parseInt(min), max == null ? null : Integer.parseInt(max), reluctant ? QuantifierType.RELUCTANT : QuantifierType.GREEDY);
    }
    return new Quantifier(Integer.parseInt(min), Integer.parseInt(min), reluctant ? QuantifierType.RELUCTANT : QuantifierType.GREEDY);
  }
}

private boolean reluctant():
{
  boolean result = false;
}
{
  (< OPTION > { result = true; })?
  {
    return result;
  }
}

private Predicate<Void,Void,ExpressionFilterProxy> predicate():
{
  Expression filter;
  Quantifier quantifier = Quantifier.DEFAULT;
}
{
  < LBRACKET > filter=top() < RBRACKET > (quantifier=quantifier())?
  {
    return new Predicate<Void,Void,ExpressionFilterProxy>(quantifier, new ExpressionFilterProxy(filter));
  }
}
